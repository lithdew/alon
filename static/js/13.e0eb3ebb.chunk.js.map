{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/bicep/bicep.js"],"names":[],"mappings":"+FAAA,iFAEA,GAAI,GAAU,SAAU,EAAM,CAAE,MAAO,MAAQ,EAAO,OAClD,EAAkB,YAClB,EAAqB,eACrB,EAAa,EAAQ,GAAK,EAAkB,EAAqB,KACjE,EAAW,CACX,cACA,WACA,SACA,QACA,MACA,SACA,MACA,KACA,KACA,YAEA,EAAgB,CAAC,OAAQ,QAAS,QAClC,EAAe,eACf,EAAiB,SACV,EAAO,CACd,SAAU,CACN,YAAa,KACb,aAAc,CAAC,KAAM,OAEzB,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEV,iBAAkB,CACd,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,MAAO,MAAO,QAE1B,iBAAkB,CACd,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,YAC3C,CAAE,KAAM,MAAO,MAAO,MAAO,MAAO,CAAC,SAAU,aAEnD,gBAAiB;AAAA,GACjB,iBAAkB,CACd,sBAAuB,GAAI,QAAO,8DAClC,sBAAuB,GAAI,QAAO,4CAG/B,EAAW,CAClB,aAAc,GACd,aAAc,SACd,SAAU,CACN,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,mBAChC,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,oBAChC,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,0BAEpC,QAAS,sBACT,SAAU,EACV,cAAe,EACf,QAAS,0CACT,UAAW,CACP,KAAM,CAAC,CAAE,QAAS,eAAiB,CAAE,QAAS,gBAC9C,eAAgB,CACZ,CAAE,MAAO,cAAe,OAAQ,CAAE,MAAO,WACzC,CAAE,MAAO,MAAO,OAAQ,CAAE,MAAO,eAAgB,KAAM,UAE3D,cAAe,CACX,CAAE,MAAO,OAAQ,OAAQ,CAAE,MAAO,oBAAqB,KAAM,qBAC7D,CAAE,MAAO,aAAc,OAAQ,CAAE,MAAO,WACxC,CAAE,MAAO,WAAY,OAAQ,CAAE,MAAO,kBACtC,CAAE,MAAO,QAAS,OAAQ,CAAE,MAAO,0BACnC,CAAE,MAAO,IAAK,OAAQ,CAAE,MAAO,SAAU,KAAM,UAEnD,gBAAiB,CACb,CAAE,MAAO,IAAK,OAAQ,CAAE,MAAO,oBAAqB,KAAM,qBAC1D,CAAE,MAAO,IAAK,OAAQ,CAAE,MAAO,oBAAqB,KAAM,SAC1D,CAAE,QAAS,eAEf,QAAS,CACL,CAAE,MAAO,UAAW,OAAQ,CAAE,MAAO,YACrC,CAAE,MAAO,SAAU,OAAQ,CAAE,MAAO,UAAW,KAAM,SACrD,CAAE,MAAO,SAAU,OAAQ,CAAE,MAAO,aAExC,WAAY,CACR,CAAE,MAAO,GACT,CAAE,MAAO,SAAU,OAAQ,CAAE,MAAO,UAAW,KAAM,aACrD,CAAE,MAAO,YAAa,OAAQ,CAAE,MAAO,aAE3C,WAAY,CACR,CAAE,MAAO,MAAO,OAAQ,CAAE,MAAO,eAAgB,KAAM,oBACvD,CAAE,MAAO,IAAK,OAAQ,CAAE,MAAO,eAAgB,KAAM,mBACrD,CAAE,MAAO,EAAgB,OAAQ,CAAE,MAAO,WAC1C,CACI,MAAO,EACP,OAAQ,CACJ,MAAO,CACH,YAAa,CAAE,MAAO,WACtB,iBAAkB,CAAE,MAAO,WAC3B,WAAY,CAAE,MAAO","file":"static/js/13.e0eb3ebb.chunk.js","sourcesContent":["// Copyright (c) Microsoft Corporation.\r\n// Licensed under the MIT License.\r\nvar bounded = function (text) { return \"\\\\b\" + text + \"\\\\b\"; };\r\nvar identifierStart = '[_a-zA-Z]';\r\nvar identifierContinue = '[_a-zA-Z0-9]';\r\nvar identifier = bounded(\"\" + identifierStart + identifierContinue + \"*\");\r\nvar keywords = [\r\n    'targetScope',\r\n    'resource',\r\n    'module',\r\n    'param',\r\n    'var',\r\n    'output',\r\n    'for',\r\n    'in',\r\n    'if',\r\n    'existing'\r\n];\r\nvar namedLiterals = ['true', 'false', 'null'];\r\nvar nonCommentWs = \"[ \\\\t\\\\r\\\\n]\";\r\nvar numericLiteral = \"[0-9]+\";\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')']\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: \"'''\", close: \"'''\" }\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] },\r\n        { open: \"'''\", close: \"'''\", notIn: ['string', 'comment'] }\r\n    ],\r\n    autoCloseBefore: \":.,=}])' \\n\\t\",\r\n    indentationRules: {\r\n        increaseIndentPattern: new RegExp('^((?!\\\\/\\\\/).)*(\\\\{[^}\"\\'`]*|\\\\([^)\"\\'`]*|\\\\[[^\\\\]\"\\'`]*)$'),\r\n        decreaseIndentPattern: new RegExp('^((?!.*?\\\\/\\\\*).*\\\\*/)?\\\\s*[\\\\}\\\\]].*$')\r\n    }\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.bicep',\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\r\n    ],\r\n    symbols: /[=><!~?:&|+\\-*/^%]+/,\r\n    keywords: keywords,\r\n    namedLiterals: namedLiterals,\r\n    escapes: \"\\\\\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\\\\\|'|\\\\${)\",\r\n    tokenizer: {\r\n        root: [{ include: '@expression' }, { include: '@whitespace' }],\r\n        stringVerbatim: [\r\n            { regex: \"(|'|'')[^']\", action: { token: 'string' } },\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@pop' } }\r\n        ],\r\n        stringLiteral: [\r\n            { regex: \"\\\\${\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"[^\\\\\\\\'$]+\", action: { token: 'string' } },\r\n            { regex: '@escapes', action: { token: 'string.escape' } },\r\n            { regex: \"\\\\\\\\.\", action: { token: 'string.escape.invalid' } },\r\n            { regex: \"'\", action: { token: 'string', next: '@pop' } }\r\n        ],\r\n        bracketCounting: [\r\n            { regex: \"{\", action: { token: 'delimiter.bracket', next: '@bracketCounting' } },\r\n            { regex: \"}\", action: { token: 'delimiter.bracket', next: '@pop' } },\r\n            { include: 'expression' }\r\n        ],\r\n        comment: [\r\n            { regex: \"[^\\\\*]+\", action: { token: 'comment' } },\r\n            { regex: \"\\\\*\\\\/\", action: { token: 'comment', next: '@pop' } },\r\n            { regex: \"[\\\\/*]\", action: { token: 'comment' } }\r\n        ],\r\n        whitespace: [\r\n            { regex: nonCommentWs },\r\n            { regex: \"\\\\/\\\\*\", action: { token: 'comment', next: '@comment' } },\r\n            { regex: \"\\\\/\\\\/.*$\", action: { token: 'comment' } }\r\n        ],\r\n        expression: [\r\n            { regex: \"'''\", action: { token: 'string.quote', next: '@stringVerbatim' } },\r\n            { regex: \"'\", action: { token: 'string.quote', next: '@stringLiteral' } },\r\n            { regex: numericLiteral, action: { token: 'number' } },\r\n            {\r\n                regex: identifier,\r\n                action: {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword' },\r\n                        '@namedLiterals': { token: 'keyword' },\r\n                        '@default': { token: 'identifier' }\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n};\r\n"],"sourceRoot":""}