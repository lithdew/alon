{"version":3,"sources":["../node_modules/blake3/esm/browser/wasm.js","../node_modules/blake3/esm/base/hash-fn.js","../node_modules/blake3/esm/browser/encoding.js","../node_modules/blake3/esm/browser/hash.js","../node_modules/blake3/esm/browser/hash-fn.js","../node_modules/blake3/esm/base/hash-reader.js","../node_modules/blake3/esm/base/hash-instance.js","../node_modules/blake3/esm/base/disposable.js","../node_modules/blake3/esm/browser/hash-reader.js","../node_modules/blake3/esm/browser/hash-instance.js","../node_modules/blake3/browser.js","../node_modules/blake3/dist/wasm/browser/blake3_js.js"],"names":[],"mappings":"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","file":"static/js/5.13268bf9.chunk.js","sourcesContent":["let wasm;\n/**\n * Gets the webassembly module provided in provideWasm.\n */\nexport const getWasm = () => {\n    if (!wasm) {\n        throw new Error('BLAKE3 webassembly not loaded. Please import the module via `blake3/browser` or `blake3/browser-async`');\n    }\n    return wasm;\n};\n/**\n * Sets the webassembly module used for the browser build. This indirection is\n * needed to provide compatibility between the \"browser\" and \"browser-async\" modes.\n */\nexport const provideWasm = (w) => {\n    wasm = w;\n};\n//# sourceMappingURL=wasm.js.map","/**\n * Default hash length, in bytes, unless otherwise specified.\n */\nexport const defaultHashLength = 32;\n/**\n * Converts the input to an Uint8Array.\n * @hidden\n */\nexport const inputToArray = (input) => input instanceof Uint8Array ? input : new Uint8Array(input);\n//# sourceMappingURL=hash-fn.js.map","// A small collection of encodings for convenience of use in the browser.\nconst decoder = new TextDecoder();\nconst encoders = {\n    // certainly not the fastest, but hashes are pretty small\n    base64: data => btoa(String.fromCharCode(...data)),\n    hex: data => {\n        let out = '';\n        for (const byte of data) {\n            if (byte < 0x10) {\n                out += '0';\n            }\n            out += byte.toString(16);\n        }\n        return out;\n    },\n    utf8: data => decoder.decode(data),\n};\n/**\n * @hidden\n */\nexport const mustGetEncoder = (encoding) => {\n    const encoder = encoders[encoding];\n    if (!encoder) {\n        throw new Error(`Unknown encoding ${encoding}`);\n    }\n    return encoder;\n};\n//# sourceMappingURL=encoding.js.map","import { mustGetEncoder } from './encoding.js';\n/**\n * Hash returned from functions in the browser.\n */\nexport class Hash extends Uint8Array {\n    /**\n     * A constant-time comparison against the other hash/array.\n     */\n    equals(other) {\n        if (!(other instanceof Uint8Array)) {\n            return false;\n        }\n        if (other.length !== this.length) {\n            return false;\n        }\n        let cmp = 0;\n        for (let i = 0; i < this.length; i++) {\n            cmp |= this[i] ^ other[i];\n        }\n        return cmp === 0;\n    }\n    toString(encoding = 'hex') {\n        return mustGetEncoder(encoding)(this);\n    }\n}\n//# sourceMappingURL=hash.js.map","import { inputToArray, defaultHashLength } from '../base/hash-fn.js';\nimport { Hash } from './hash.js';\nimport { getWasm } from './wasm.js';\nconst textEncoder = new TextEncoder();\n/**\n * @hidden\n */\nexport const normalizeInput = (input) => inputToArray(typeof input === 'string' ? textEncoder.encode(input) : input);\n/**\n * Returns a blake3 hash of the input.\n */\nexport function hash(input, { length = defaultHashLength } = {}) {\n    const result = new Hash(length);\n    getWasm().hash(normalizeInput(input), result);\n    return result;\n}\n/**\n * Given cryptographic key material  and a context string, services a subkey of\n * any length. See {@link https://docs.rs/blake3/0.1.3/blake3/fn.derive_key.html}\n * for more information.\n */\nexport function deriveKey(context, material, { length = defaultHashLength } = {}) {\n    const derive = getWasm().create_derive(context);\n    derive.update(normalizeInput(material));\n    const result = new Hash(length);\n    derive.digest(result);\n    return result;\n}\n/**\n * The keyed hash function. See {@link https://docs.rs/blake3/0.1.3/blake3/fn.keyed_hash.html}.\n */\nexport function keyedHash(key, input, { length = defaultHashLength } = {}) {\n    if (key.length !== 32) {\n        throw new Error(`key provided to keyedHash must be 32 bytes, got ${key.length}`);\n    }\n    const derive = getWasm().create_keyed(key);\n    derive.update(normalizeInput(input));\n    const result = new Hash(length);\n    derive.digest(result);\n    return result;\n}\n//# sourceMappingURL=hash-fn.js.map","/**\n * The maximum number of bytes that can be read from the hash.\n *\n * Calculated out 2^64-1, since `Xn` syntax (for `Xn ** Yn`) requires TS\n * targeting esnext/es2020 which includes features that Node 10 doesn't\n * yet supported.\n */\nexport const maxHashBytes = BigInt('18446744073709551615');\n/**\n * Base hash reader implementation.\n */\nexport class BaseHashReader {\n    constructor(reader) {\n        this.pos = BigInt(0);\n        this.reader = reader;\n    }\n    get position() {\n        return this.pos;\n    }\n    set position(value) {\n        var _a;\n        // to avoid footguns of people using numbers:\n        if (typeof value !== 'bigint') {\n            throw new Error(`Got a ${typeof value} set in to reader.position, expected a bigint`);\n        }\n        this.boundsCheck(value);\n        this.pos = value;\n        (_a = this.reader) === null || _a === void 0 ? void 0 : _a.set_position(value);\n    }\n    /**\n     * @inheritdoc\n     */\n    readInto(target) {\n        if (!this.reader) {\n            throw new Error(`Cannot read from a hash after it was disposed`);\n        }\n        const next = this.pos + BigInt(target.length);\n        this.boundsCheck(next);\n        this.reader.fill(target);\n        this.position = next;\n    }\n    /**\n     * @inheritdoc\n     */\n    read(bytes) {\n        const data = this.alloc(bytes);\n        this.readInto(data);\n        return data;\n    }\n    /**\n     * @inheritdoc\n     */\n    dispose() {\n        var _a, _b;\n        (_b = (_a = this.reader) === null || _a === void 0 ? void 0 : _a.free) === null || _b === void 0 ? void 0 : _b.call(_a);\n        this.reader = undefined;\n    }\n    boundsCheck(position) {\n        if (position > maxHashBytes) {\n            throw new RangeError(`Cannot read past ${maxHashBytes} bytes in BLAKE3 hashes`);\n        }\n        if (position < BigInt(0)) {\n            throw new RangeError(`Cannot read to a negative position`);\n        }\n    }\n}\n//# sourceMappingURL=hash-reader.js.map","import { inputToArray, defaultHashLength } from './hash-fn.js';\n/**\n * Base implementation of hashing.\n */\nexport class BaseHash {\n    constructor(implementation, alloc, getReader) {\n        this.alloc = alloc;\n        this.getReader = getReader;\n        this.hash = implementation;\n    }\n    /**\n     * @inheritdoc\n     */\n    update(data) {\n        if (!this.hash) {\n            throw new Error('Cannot continue updating hashing after dispose() has been called');\n        }\n        this.hash.update(inputToArray(data));\n        return this;\n    }\n    /**\n     * @inheritdoc\n     */\n    digest({ length = defaultHashLength, dispose = true } = {}) {\n        if (!this.hash) {\n            throw new Error('Cannot call digest() after dipose() has been called');\n        }\n        const digested = this.alloc(length);\n        this.hash.digest(digested);\n        if (dispose) {\n            this.dispose();\n        }\n        return digested;\n    }\n    /**\n     * @inheritdoc\n     */\n    reader({ dispose = true } = {}) {\n        if (!this.hash) {\n            throw new Error('Cannot call reader() after dipose() has been called');\n        }\n        const reader = this.getReader(this.hash.reader());\n        if (dispose) {\n            this.dispose();\n        }\n        return reader;\n    }\n    /**\n     * @inheritdoc\n     */\n    dispose() {\n        var _a;\n        (_a = this.hash) === null || _a === void 0 ? void 0 : _a.free();\n        this.hash = undefined;\n    }\n}\n//# sourceMappingURL=hash-instance.js.map","const isPromiseLike = (value) => typeof value === 'object' && !!value && 'then' in value;\n/**\n * A helper function that calls `.dispose()` on the {@link IDisposable} when\n * the given function (or promise returned by the function) returns.\n */\nexport const using = (disposable, fn) => {\n    let ret;\n    try {\n        ret = fn(disposable);\n    }\n    catch (e) {\n        disposable.dispose();\n        throw e;\n    }\n    if (!isPromiseLike(ret)) {\n        disposable.dispose();\n        return ret;\n    }\n    return ret.then(value => {\n        disposable.dispose();\n        return value;\n    }, err => {\n        disposable.dispose();\n        throw err;\n    });\n};\n//# sourceMappingURL=disposable.js.map","import { BaseHashReader } from '../base/hash-reader.js';\nimport { Hash } from './hash.js';\nimport { defaultHashLength } from '../base/index.js';\n/**\n * A hash reader for WebAssembly targets.\n */\nexport class BrowserHashReader extends BaseHashReader {\n    /**\n     * Converts first 32 bytes of the hash to a string with the given encoding.\n     */\n    toString(encoding = 'hex') {\n        return this.toArray().toString(encoding);\n    }\n    /**\n     * Converts first 32 bytes of the hash to an array.\n     */\n    toArray() {\n        this.position = BigInt(0);\n        return this.read(defaultHashLength);\n    }\n    alloc(bytes) {\n        return new Hash(bytes);\n    }\n}\n//# sourceMappingURL=hash-reader.js.map","import { BaseHash as BaseHasher } from '../base/index.js';\nimport { normalizeInput } from './hash-fn.js';\nimport { mustGetEncoder } from './encoding.js';\nimport { BrowserHashReader } from './hash-reader.js';\nimport { Hash } from './hash.js';\nimport { getWasm } from './wasm.js';\n/**\n * @inheritdoc\n */\nexport class BrowserHasher extends BaseHasher {\n    /**\n     * @inheritdoc\n     * @override\n     */\n    update(data) {\n        return super.update(normalizeInput(data));\n    }\n    digest(encoding, options) {\n        let resolvedOpts;\n        let resolvedEnc;\n        if (encoding && typeof encoding === 'object') {\n            resolvedOpts = encoding;\n            resolvedEnc = undefined;\n        }\n        else {\n            resolvedOpts = options;\n            resolvedEnc = encoding;\n        }\n        const result = super.digest(resolvedOpts);\n        return resolvedEnc ? mustGetEncoder(resolvedEnc)(result) : result;\n    }\n}\n/**\n * A Node.js crypto-like createHash method.\n */\nexport const createHash = () => new BrowserHasher(getWasm().create_hasher(), l => new Hash(l), r => new BrowserHashReader(r));\n/**\n * A Node.js crypto-like createHash method.\n */\nexport const createKeyed = (key) => new BrowserHasher(getWasm().create_keyed(key), l => new Hash(l), r => new BrowserHashReader(r));\n//# sourceMappingURL=hash-instance.js.map","import { provideWasm } from './esm/browser/wasm';\nimport * as wasm from './dist/wasm/browser';\n\nprovideWasm(wasm);\n\nexport * from './esm/browser';\n","import * as wasm from './blake3_js_bg.wasm';\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint8Array} data\n* @param {Uint8Array} out\n*/\nexport function hash(data, out) {\n    try {\n        var ptr0 = passArray8ToWasm0(data, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ptr1 = passArray8ToWasm0(out, wasm.__wbindgen_malloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.hash(ptr0, len0, ptr1, len1);\n    } finally {\n        out.set(getUint8Memory0().subarray(ptr1 / 1, ptr1 / 1 + len1));\n        wasm.__wbindgen_free(ptr1, len1 * 1);\n    }\n}\n\n/**\n* @returns {Blake3Hash}\n*/\nexport function create_hasher() {\n    var ret = wasm.create_hasher();\n    return Blake3Hash.__wrap(ret);\n}\n\n/**\n* @param {Uint8Array} key_slice\n* @returns {Blake3Hash}\n*/\nexport function create_keyed(key_slice) {\n    var ptr0 = passArray8ToWasm0(key_slice, wasm.__wbindgen_malloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.create_keyed(ptr0, len0);\n    return Blake3Hash.__wrap(ret);\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n/**\n* @param {string} context\n* @returns {Blake3Hash}\n*/\nexport function create_derive(context) {\n    var ptr0 = passStringToWasm0(context, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    var ret = wasm.create_derive(ptr0, len0);\n    return Blake3Hash.__wrap(ret);\n}\n\nconst u32CvtShim = new Uint32Array(2);\n\nconst uint64CvtShim = new BigUint64Array(u32CvtShim.buffer);\n/**\n*/\nexport class Blake3Hash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Blake3Hash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_blake3hash_free(ptr);\n    }\n    /**\n    * @returns {HashReader}\n    */\n    reader() {\n        var ret = wasm.blake3hash_reader(this.ptr);\n        return HashReader.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} input_bytes\n    */\n    update(input_bytes) {\n        var ptr0 = passArray8ToWasm0(input_bytes, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.blake3hash_update(this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {Uint8Array} out\n    */\n    digest(out) {\n        try {\n            var ptr0 = passArray8ToWasm0(out, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.blake3hash_digest(this.ptr, ptr0, len0);\n        } finally {\n            out.set(getUint8Memory0().subarray(ptr0 / 1, ptr0 / 1 + len0));\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n        }\n    }\n}\n/**\n*/\nexport class HashReader {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HashReader.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        wasm.__wbg_hashreader_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    */\n    fill(bytes) {\n        try {\n            var ptr0 = passArray8ToWasm0(bytes, wasm.__wbindgen_malloc);\n            var len0 = WASM_VECTOR_LEN;\n            wasm.hashreader_fill(this.ptr, ptr0, len0);\n        } finally {\n            bytes.set(getUint8Memory0().subarray(ptr0 / 1, ptr0 / 1 + len0));\n            wasm.__wbindgen_free(ptr0, len0 * 1);\n        }\n    }\n    /**\n    * @param {BigInt} position\n    */\n    set_position(position) {\n        uint64CvtShim[0] = position;\n        const low0 = u32CvtShim[0];\n        const high0 = u32CvtShim[1];\n        wasm.hashreader_set_position(this.ptr, low0, high0);\n    }\n}\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"sourceRoot":""}