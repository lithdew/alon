{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/sb/sb.js"],"names":[],"mappings":"+FAAA,iFAIO,GAAI,GAAO,CACd,SAAU,CACN,YAAa,KAEjB,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,KAAM,SACP,CAAC,QAAS,YACV,CAAC,MAAO,UACR,CAAC,MAAO,WAEZ,iBAAkB,CACd,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,YAC3C,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,YAC3C,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,CAAC,SAAU,cAGxC,EAAW,CAClB,aAAc,GACd,aAAc,MACd,WAAY,GACZ,SAAU,CACN,CAAE,MAAO,kBAAmB,KAAM,IAAK,MAAO,KAC9C,CAAE,MAAO,wBAAyB,KAAM,IAAK,MAAO,KAEpD,CAAE,MAAO,iBAAkB,KAAM,KAAM,MAAO,SAC9C,CAAE,MAAO,oBAAqB,KAAM,QAAS,MAAO,YACpD,CAAE,MAAO,kBAAmB,KAAM,MAAO,MAAO,UAChD,CAAE,MAAO,kBAAmB,KAAM,MAAO,MAAO,WAEpD,SAAU,CACN,OACA,SACA,SACA,QACA,SACA,WACA,MACA,OACA,KACA,OACA,MACA,OACA,KACA,SAEJ,SAAU,CAAC,KAAM,MAAO,QAAS,OACjC,UAAW,CAAC,IAAK,IAAK,KAAM,KAAM,KAAM,MAAO,KAAM,IAAK,IAAK,IAAK,IAAK,KAEzE,WAAY,iBACZ,QAAS,oBACT,QAAS,wEAET,UAAW,CACP,KAAM,CAEF,CAAE,QAAS,eAEX,CAAC,uBAAwB,QAEzB,CACI,cACA,CACI,MAAO,CACH,YAAa,CAAE,MAAO,cACtB,aAAc,WACd,WAAY,mBAKxB,CACI,qBACA,CACI,MAAO,CACH,GAAI,CAAC,YAAa,eAClB,WAAY,MAKxB,CAAC,WAAY,gBACb,CAAC,MAAO,UAER,CAAC,WAAY,aACb,CACI,WACA,CACI,MAAO,CACH,aAAc,WACd,WAAY,eAKxB,CAAC,kBAAmB,kBACpB,CAAC,IAAK,SAAU,YAEpB,WAAY,CACR,CAAC,aAAc,IACf,CAAC,UAAW,YAEhB,OAAQ,CACJ,CAAC,UAAW,UACZ,CAAC,WAAY,iBACb,CAAC,MAAO,yBACR,CAAC,MAAO,SAAU","file":"static/js/63.57847c96.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: \"'\"\r\n    },\r\n    brackets: [\r\n        ['(', ')'],\r\n        ['[', ']'],\r\n        ['If', 'EndIf'],\r\n        ['While', 'EndWhile'],\r\n        ['For', 'EndFor'],\r\n        ['Sub', 'EndSub']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\r\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\r\n        { open: '[', close: ']', notIn: ['string', 'comment'] }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.sb',\r\n    ignoreCase: true,\r\n    brackets: [\r\n        { token: 'delimiter.array', open: '[', close: ']' },\r\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\r\n        // Special bracket statement pairs\r\n        { token: 'keyword.tag-if', open: 'If', close: 'EndIf' },\r\n        { token: 'keyword.tag-while', open: 'While', close: 'EndWhile' },\r\n        { token: 'keyword.tag-for', open: 'For', close: 'EndFor' },\r\n        { token: 'keyword.tag-sub', open: 'Sub', close: 'EndSub' }\r\n    ],\r\n    keywords: [\r\n        'Else',\r\n        'ElseIf',\r\n        'EndFor',\r\n        'EndIf',\r\n        'EndSub',\r\n        'EndWhile',\r\n        'For',\r\n        'Goto',\r\n        'If',\r\n        'Step',\r\n        'Sub',\r\n        'Then',\r\n        'To',\r\n        'While'\r\n    ],\r\n    tagwords: ['If', 'Sub', 'While', 'For'],\r\n    operators: ['>', '<', '<>', '<=', '>=', 'And', 'Or', '+', '-', '*', '/', '='],\r\n    // we include these common regular expressions\r\n    identifier: /[a-zA-Z_][\\w]*/,\r\n    symbols: /[=><:+\\-*\\/%\\.,]+/,\r\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // classes\r\n            [/(@identifier)(?=[.])/, 'type'],\r\n            // identifiers, tagwords, and keywords\r\n            [\r\n                /@identifier/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@operators': 'operator',\r\n                        '@default': 'variable.name'\r\n                    }\r\n                }\r\n            ],\r\n            // methods, properties, and events\r\n            [\r\n                /([.])(@identifier)/,\r\n                {\r\n                    cases: {\r\n                        $2: ['delimiter', 'type.member'],\r\n                        '@default': ''\r\n                    }\r\n                }\r\n            ],\r\n            // numbers\r\n            [/\\d*\\.\\d+/, 'number.float'],\r\n            [/\\d+/, 'number'],\r\n            // delimiters and operators\r\n            [/[()\\[\\]]/, '@brackets'],\r\n            [\r\n                /@symbols/,\r\n                {\r\n                    cases: {\r\n                        '@operators': 'operator',\r\n                        '@default': 'delimiter'\r\n                    }\r\n                }\r\n            ],\r\n            // strings\r\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/\"/, 'string', '@string']\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/(\\').*$/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\\"]+/, 'string'],\r\n            [/@escapes/, 'string.escape'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/\"C?/, 'string', '@pop']\r\n        ]\r\n    }\r\n};\r\n"],"sourceRoot":""}