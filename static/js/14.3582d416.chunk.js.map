{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/cameligo/cameligo.js"],"names":[],"mappings":"+FAAA,iFAIO,GAAI,GAAO,CACd,SAAU,CACN,YAAa,KACb,aAAc,CAAC,KAAM,OAEzB,SAAU,CACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,KACN,CAAC,IAAK,MAEV,iBAAkB,CACd,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAM,MAAO,KACrB,CAAE,KAAM,KAAM,MAAO,OAEzB,iBAAkB,CACd,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAM,MAAO,KACrB,CAAE,KAAM,KAAM,MAAO,QAGlB,EAAW,CAClB,aAAc,GACd,aAAc,YACd,WAAY,GACZ,SAAU,CACN,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,mBAChC,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,oBAChC,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,yBAChC,CAAE,KAAM,IAAK,MAAO,IAAK,MAAO,oBAEpC,SAAU,CACN,MACA,SACA,QACA,QACA,OACA,SACA,UACA,OACA,WACA,QACA,MACA,MACA,KACA,KACA,MACA,YACA,WACA,OACA,OACA,MACA,MACA,QACA,YACA,MACA,MACA,YACA,YACA,KACA,SACA,MACA,MACA,SACA,OACA,SACA,SACA,OACA,KACA,OACA,OACA,QAEJ,aAAc,CAAC,MAAO,OAAQ,SAAU,KAAM,MAAO,QACrD,UAAW,CACP,IACA,IACA,IACA,KACA,KACA,KACA,IACA,KACA,MACA,MACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,KACA,KACA,MAGJ,QAAS,wBAET,UAAW,CACP,KAAM,CAEF,CACI,iBACA,CACI,MAAO,CACH,YAAa,CAAE,MAAO,cACtB,WAAY,gBAKxB,CAAE,QAAS,eAEX,CAAC,aAAc,aACf,CAAC,mBAAoB,aACrB,CACI,WACA,CACI,MAAO,CACH,aAAc,YACd,WAAY,MAKxB,CAAC,2BAA4B,gBAC7B,CAAC,sBAAuB,cACxB,CAAC,MAAO,UAER,CAAC,QAAS,aAEV,CAAC,kBAAmB,kBACpB,CAAC,IAAK,SAAU,WAEhB,CAAC,WAAY,UACb,CAAC,IAAK,kBACN,CAAC,QAAS,WAGd,QAAS,CACL,CAAC,WAAY,WAEb,CAAC,OAAQ,UAAW,QACpB,CAAC,OAAQ,YAEb,OAAQ,CACJ,CAAC,UAAW,UACZ,CAAC,MAAO,yBACR,CAAC,IAAK,CAAE,MAAO,eAAgB,QAAS,SAAU,KAAM,UAE5D,WAAY,CACR,CAAC,aAAc,SACf,CAAC,OAAQ,UAAW,YACpB,CAAC,UAAW","file":"static/js/14.3582d416.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nexport var conf = {\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['(*', '*)']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']'],\r\n        ['(', ')'],\r\n        ['<', '>']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: \"\\\"\", close: \"\\\"\" },\r\n        { open: \"(*\", close: \"*)\" },\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '{', close: '}' },\r\n        { open: '[', close: ']' },\r\n        { open: '(', close: ')' },\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: \"\\\"\", close: \"\\\"\" },\r\n        { open: \"(*\", close: \"*)\" },\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.cameligo',\r\n    ignoreCase: true,\r\n    brackets: [\r\n        { open: '{', close: '}', token: 'delimiter.curly' },\r\n        { open: '[', close: ']', token: 'delimiter.square' },\r\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\r\n        { open: '<', close: '>', token: 'delimiter.angle' }\r\n    ],\r\n    keywords: [\r\n        'abs',\r\n        'assert',\r\n        'block',\r\n        'Bytes',\r\n        'case',\r\n        'Crypto',\r\n        'Current',\r\n        'else',\r\n        'failwith',\r\n        'false',\r\n        'for',\r\n        'fun',\r\n        'if',\r\n        'in',\r\n        'let',\r\n        'let%entry',\r\n        'let%init',\r\n        'List',\r\n        'list',\r\n        'Map',\r\n        'map',\r\n        'match',\r\n        'match%nat',\r\n        'mod',\r\n        'not',\r\n        'operation',\r\n        'Operation',\r\n        'of',\r\n        'record',\r\n        'Set',\r\n        'set',\r\n        'sender',\r\n        'skip',\r\n        'source',\r\n        'String',\r\n        'then',\r\n        'to',\r\n        'true',\r\n        'type',\r\n        'with',\r\n    ],\r\n    typeKeywords: ['int', 'unit', 'string', 'tz', 'nat', 'bool'],\r\n    operators: [\r\n        '=',\r\n        '>',\r\n        '<',\r\n        '<=',\r\n        '>=',\r\n        '<>',\r\n        ':',\r\n        ':=',\r\n        'and',\r\n        'mod',\r\n        'or',\r\n        '+',\r\n        '-',\r\n        '*',\r\n        '/',\r\n        '@',\r\n        '&',\r\n        '^',\r\n        '%',\r\n        '->',\r\n        '<-',\r\n        '&&',\r\n        '||',\r\n    ],\r\n    // we include these common regular expressions\r\n    symbols: /[=><:@\\^&|+\\-*\\/\\^%]+/,\r\n    // The main tokenizer for our languages\r\n    tokenizer: {\r\n        root: [\r\n            // identifiers and keywords\r\n            [\r\n                /[a-zA-Z_][\\w]*/,\r\n                {\r\n                    cases: {\r\n                        '@keywords': { token: 'keyword.$0' },\r\n                        '@default': 'identifier'\r\n                    }\r\n                }\r\n            ],\r\n            // whitespace\r\n            { include: '@whitespace' },\r\n            // delimiters and operators\r\n            [/[{}()\\[\\]]/, '@brackets'],\r\n            [/[<>](?!@symbols)/, '@brackets'],\r\n            [\r\n                /@symbols/,\r\n                {\r\n                    cases: {\r\n                        '@operators': 'delimiter',\r\n                        '@default': ''\r\n                    }\r\n                }\r\n            ],\r\n            // numbers\r\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\r\n            [/\\$[0-9a-fA-F]{1,16}/, 'number.hex'],\r\n            [/\\d+/, 'number'],\r\n            // delimiter: after number because of .\\d floats\r\n            [/[;,.]/, 'delimiter'],\r\n            // strings\r\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\r\n            [/'/, 'string', '@string'],\r\n            // characters\r\n            [/'[^\\\\']'/, 'string'],\r\n            [/'/, 'string.invalid'],\r\n            [/\\#\\d+/, 'string']\r\n        ],\r\n        /* */\r\n        comment: [\r\n            [/[^\\(\\*]+/, 'comment'],\r\n            //[/\\(\\*/,    'comment', '@push' ],    // nested comment  not allowed :-(\r\n            [/\\*\\)/, 'comment', '@pop'],\r\n            [/\\(\\*/, 'comment']\r\n        ],\r\n        string: [\r\n            [/[^\\\\']+/, 'string'],\r\n            [/\\\\./, 'string.escape.invalid'],\r\n            [/'/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, 'white'],\r\n            [/\\(\\*/, 'comment', '@comment'],\r\n            [/\\/\\/.*$/, 'comment']\r\n        ]\r\n    }\r\n};\r\n"],"sourceRoot":""}