{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/xml/xml.js"],"names":[],"mappings":"+FAAA,8FAKW,EAAO,CACd,SAAU,CACN,aAAc,CAAC,OAAQ,QAE3B,SAAU,CAAC,CAAC,IAAK,MACjB,iBAAkB,CACd,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,MAExB,iBAAkB,CACd,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,KACpB,CAAE,KAAM,IAAK,MAAO,MAExB,aAAc,CACV,CACI,WAAY,GAAI,QAAO,8CAA+C,KACtE,UAAW,gCACX,OAAQ,CACJ,aAAc,YAAU,aAAa,gBAG7C,CACI,WAAY,GAAI,QAAO,sCAAuC,KAC9D,OAAQ,CAAE,aAAc,YAAU,aAAa,WAIhD,EAAW,CAClB,aAAc,GACd,aAAc,OACd,WAAY,GAEZ,cAAe,2BACf,UAAW,CACP,KAAM,CACF,CAAC,SAAU,IACX,CAAE,QAAS,eAEX,CAAC,sBAAuB,CAAC,CAAE,MAAO,aAAe,CAAE,MAAO,MAAO,KAAM,UAEvE,CACI,gCACA,CAAC,CAAE,MAAO,aAAe,CAAE,MAAO,OAAS,GAAI,CAAE,MAAO,eAG5D,CAAC,wBAAyB,CAAC,CAAE,MAAO,aAAe,CAAE,MAAO,UAAW,KAAM,UAE7E,CAAC,wBAAyB,CAAC,CAAE,MAAO,aAAe,CAAE,MAAO,UAAW,KAAM,UAE7E,CAAC,eAAgB,CAAE,MAAO,kBAAmB,KAAM,WACnD,CAAC,QAAS,kBAEd,MAAO,CACH,CAAC,SAAU,IACX,CAAC,QAAS,CAAE,MAAO,kBAAmB,KAAM,SAC5C,CAAC,KAAM,KAEX,IAAK,CACD,CAAC,aAAc,IACf,CACI,6CACA,CAAC,iBAAkB,GAAI,oBAE3B,CACI,+DACA,CAAC,iBAAkB,GAAI,oBAE3B,CACI,6CACA,CAAC,iBAAkB,GAAI,oBAE3B,CAAC,iBAAkB,kBACnB,CAAC,MAAO,CAAE,MAAO,YAAa,KAAM,SACpC,CAAC,UAAW,CAAC,CAAE,MAAO,OAAS,CAAE,MAAO,YAAa,KAAM,UAC3D,CAAC,IAAK,CAAE,MAAO,YAAa,KAAM,UAEtC,WAAY,CACR,CAAC,aAAc,IACf,CAAC,OAAQ,CAAE,MAAO,UAAW,KAAM,cAEvC,QAAS,CACL,CAAC,UAAW,mBACZ,CAAC,MAAO,CAAE,MAAO,UAAW,KAAM,SAClC,CAAC,OAAQ,2BACT,CAAC,QAAS","file":"static/js/77.772c9c7e.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\nimport { languages } from '../fillers/monaco-editor-core.js';\r\nexport var conf = {\r\n    comments: {\r\n        blockComment: ['<!--', '-->']\r\n    },\r\n    brackets: [['<', '>']],\r\n    autoClosingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    surroundingPairs: [\r\n        { open: '<', close: '>' },\r\n        { open: \"'\", close: \"'\" },\r\n        { open: '\"', close: '\"' }\r\n    ],\r\n    onEnterRules: [\r\n        {\r\n            beforeText: new RegExp(\"<([_:\\\\w][_:\\\\w-.\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            afterText: /^<\\/([_:\\w][_:\\w-.\\d]*)\\s*>$/i,\r\n            action: {\r\n                indentAction: languages.IndentAction.IndentOutdent\r\n            }\r\n        },\r\n        {\r\n            beforeText: new RegExp(\"<(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\r\n            action: { indentAction: languages.IndentAction.Indent }\r\n        }\r\n    ]\r\n};\r\nexport var language = {\r\n    defaultToken: '',\r\n    tokenPostfix: '.xml',\r\n    ignoreCase: true,\r\n    // Useful regular expressions\r\n    qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\r\n    tokenizer: {\r\n        root: [\r\n            [/[^<&]+/, ''],\r\n            { include: '@whitespace' },\r\n            // Standard opening tag\r\n            [/(<)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'tag', next: '@tag' }]],\r\n            // Standard closing tag\r\n            [\r\n                /(<\\/)(@qualifiedName)(\\s*)(>)/,\r\n                [{ token: 'delimiter' }, { token: 'tag' }, '', { token: 'delimiter' }]\r\n            ],\r\n            // Meta tags - instruction\r\n            [/(<\\?)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\r\n            // Meta tags - declaration\r\n            [/(<\\!)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\r\n            // CDATA\r\n            [/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', next: '@cdata' }],\r\n            [/&\\w+;/, 'string.escape']\r\n        ],\r\n        cdata: [\r\n            [/[^\\]]+/, ''],\r\n            [/\\]\\]>/, { token: 'delimiter.cdata', next: '@pop' }],\r\n            [/\\]/, '']\r\n        ],\r\n        tag: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [\r\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/,\r\n                ['attribute.name', '', 'attribute.value']\r\n            ],\r\n            [/@qualifiedName/, 'attribute.name'],\r\n            [/\\?>/, { token: 'delimiter', next: '@pop' }],\r\n            [/(\\/)(>)/, [{ token: 'tag' }, { token: 'delimiter', next: '@pop' }]],\r\n            [/>/, { token: 'delimiter', next: '@pop' }]\r\n        ],\r\n        whitespace: [\r\n            [/[ \\t\\r\\n]+/, ''],\r\n            [/<!--/, { token: 'comment', next: '@comment' }]\r\n        ],\r\n        comment: [\r\n            [/[^<\\-]+/, 'comment.content'],\r\n            [/-->/, { token: 'comment', next: '@pop' }],\r\n            [/<!--/, 'comment.content.invalid'],\r\n            [/[<\\-]/, 'comment.content']\r\n        ]\r\n    }\r\n};\r\n"],"sourceRoot":""}